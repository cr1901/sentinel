# git-cliff ~ configuration file
# https://git-cliff.org/docs/configuration

# Adapted from: https://github.com/orhun/git-cliff/blob/main/examples/github-keepachangelog.toml
# This is not a science, and I don't directly use commits to generate a
# CHANGELOG.md. This is simply meant to help me organize commits neatly to make
# the "real" CHANGELOG.md.

# If tags for previous releases exist, initial generation is done with "git-cliff".
# All other usage will be done with "git-cliff --unreleased --tag [tag]".

[changelog]
# changelog header
header = """
# Changelog\n
All notable changes to this project will be documented in this file.

The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),
and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).\n
"""
# template for the changelog body
# https://keats.github.io/tera/docs/#introduction
body = """
{%- macro remote_url() -%}
  https://github.com/{{ remote.github.owner }}/{{ remote.github.repo }}
{%- endmacro -%}

{% if version -%}
    ## [{{ version | trim_start_matches(pat="v") }}] - {{ timestamp | date(format="%Y-%m-%d") }}
{% else -%}
    ## [Unreleased]
{% endif -%}

{% for group, commits in commits | group_by(attribute="group") %}
    ### {{ group | upper_first }}
    {%- for commit in commits %}
        - {{ commit.message | upper_first | trim }}
    {% endfor %}
{% endfor %}\n
"""
# template for the changelog footer
footer = """
{%- macro remote_url() -%}
  https://github.com/{{ remote.github.owner }}/{{ remote.github.repo }}
{%- endmacro -%}

{% for release in releases -%}
    {% if release.version -%}
        {% if loop.index0 == 0 -%}
            [Unreleased]: {{ self::remote_url() }}/compare/{{ release.version }}..HEAD
        {% endif -%}
        {% if release.previous.version -%}
            [{{ release.version | trim_start_matches(pat="v") }}]: \
                {{ self::remote_url() }}/compare/{{ release.previous.version }}..{{ release.version }}
        {% endif -%}
        {% if loop.last and not release.previous.version -%}
            [{{ release.version | trim_start_matches(pat="v") }}]: \
                {{ self::remote_url() }}/releases/tag/{{ release.version }}
        {% endif -%}
    {% else -%}
        {{ throw(message="No release version found. Run 'git cliff --unreleased --tag [tag]'") }}
    {% endif -%}
{% endfor %}
<!-- Skeleton generated by git-cliff. Maintained by hand. -->
"""
# remove the leading and trailing whitespace from the templates
trim = true

[git]
# parse the commits based on https://www.conventionalcommits.org
conventional_commits = false
# filter out the commits that are not conventional
filter_unconventional = false
# process each line of a commit as an individual commit
split_commits = false
# regex for preprocessing the commit messages
commit_preprocessors = [
    # remove issue numbers from commits
    { pattern = '\((\w+\s)?#([0-9]+)\)', replace = "" },
]
# regex for parsing and grouping commits
commit_parsers = [
    { message = "^.*([Cc]argo).*(fmt|fix|clippy)", skip = true },
    { message = "^.*([Uu]pdate).*(CHANGELOG|README)", skip = true },
    { message = "^Merge", skip = true },
    { message = "^Revert", group = "Removed" },
    { message = "^.*([Aa]dd|[Ii]mplement)", group = "Added" },
    { message = "^.*([Rr]emove|[Rr]evert|[Dd]elete)", group = "Removed" },
    { message = "^.*([Dd]eprecate)", group = "Deprecate" },
    { message = "^.*([Ff]ix)", group = "Fixed" },
    { message = "^.*", group = "Changed" },
]
# protect breaking changes from being skipped due to matching a skipping commit_parser
protect_breaking_commits = false
# filter out the commits that are not matched by commit parsers
filter_commits = false
# regex for matching git tags
tag_pattern = "v[0-9].*"
# regex for skipping tags
skip_tags = ""
# regex for ignoring tags
ignore_tags = ""
# sort the tags topologically
topo_order = false
# sort the commits inside sections by oldest/newest order
sort_commits = "newest"

[remote.github]
owner = "cr1901"
repo = "sentinel"
