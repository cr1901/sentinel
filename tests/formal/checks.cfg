[options]
isa rv32i

[groups]
# Shift insns make a true full formal test take a long time (10+ mins just
# to check assumptions), probably for little gain. Neverless, allow the
# possibility for running long tests.
full
# Group for experimenting with IRQ line. Not currently used (in particular,
# my intended use-case of "irq_cover" creates a BMC, not a cover check.)
irq

[depth]
insn            20
full_insn_slli       80
full_insn_srli       80
full_insn_srai       80
full_insn_sll        80
full_insn_srl        80
full_insn_sra        80
reg       15    25
pc_fwd    10    30
pc_bwd    10    30
liveness  1  12 39
full_liveness 1  12 150
unique    1  10 30
causal    10    30
cover     1     30

csrw            20
csr_ill         20
csrw_misa       20
csrc_any  1     20
csrc_zero  1     20
csrc_const  1     20

[csrs]
mscratch any
mcause
mip zero_mask="32'h0000F7FF"
mie zero_mask="32'h0000F7FF"
mstatus const="32'h0001800"_mask="32'hFFFFFFF7"
mtvec zero_mask="32'h00000003"
mepc zero_mask="32'h00000003"
# Read-only zero registers
mvendorid zero
marchid zero
mimpid zero
mhartid zero
mconfigptr zero
# R/W zero registers
misa zero
mstatush zero
mcountinhibit zero
mtval zero
mcycle zero  # no mcycleh in RISC-V Formal
minstret zero  # no minstreth in RISC-V Formal
# All 3-31 are zero. Just test one of each for now to avoid explosion of
# tests. No "h" regs for either.
mhpmcounter3 zero
mhpmevent3 zero

[illegal_csrs]
# Most CSRs are illegal. It is cost-prohibitive to test all of them.
# Choose a dummy register outside of M-Mode.
eff     m       rw
# Not-implemented M-Mode registers. In order: medeleg, mideleg, mcounteren,
# mtinst, mtval2, menvcfg, menvcfgh
# mseccfg/h not implemented in RISC-V Formal
302     m       rw
303     m       rw
306     m       rw
34a     m       rw
34b     m       rw
30a     m       rw
31a     m       rw

# Bug? I think the "!" shouldn't be required.
[assume !csrw_mip]
// In the presence of external/async interrupts, it may not be possible to
// ensure the data read into GP regs from MIP matches the data actually in
// MIP, or ensure that a CSR write that ends up being a no-op (or a skipped
// write) actually leaves MIP.MEIP alone, among other things. So assume
// external ints are disabled for checking MIP.
always @* assume((rvfi_csr_mip_rdata & 32'h00000800) == 0);

[defines]
`define RISCV_FORMAL_ALIGNED_MEM

[defines liveness]
`define MEMIO_FAIRNESS

[defines full_liveness]
`define MEMIO_FAIRNESS
`define NO_SHIFT_FAIRNESS

[verilog-files]
@basedir@/cores/@core@/wrapper.sv
@basedir@/cores/@core@/@core@.v

[cover]
// Create a trace which executes 5 insns.
always @* if (!reset) cover (channel[0].cnt_insns == 5);
// Get an idea of how many clocks required to meaningfully write MSCRATCH.
always @* if (!reset) cover (rvfi_valid
                             && rvfi_csr_mscratch_rdata == 32'hFEEDCAFE);
// Generate a trace that takes an IRQ.
always @* if (!reset) cover (rvfi_valid &&
                             rvfi_csr_mcause_wdata == 32'h8000000B &&
                             // TODO: Trace that takes an IRQ and executes MRET?
                             // Will at least need rvfi_trap_prev signal.
                             // rvfi_insn == 32'b00110000001000000000000001110011 &&
                             rvfi_csr_mstatus_rdata[7] == 1 &&
                             rvfi_csr_mip_rdata[11] == 1 &&
                             rvfi_csr_mie_rdata[11] == 1 &&
                             rvfi_trap);
`ifdef TRAP_TRACE
// Create a trace which demonstrates trapping.
reg rvfi_trap_prev = 0;
always @(posedge clock) if (rvfi_valid) rvfi_trap_prev <= rvfi_trap;
always @* if (!reset) cover (channel[0].cnt_insns == 5 && rvfi_valid && rvfi_trap_prev);
`endif
